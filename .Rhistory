install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='romadanovskiy', token='18633EF826B1F34C0135E54CB2A51C4C', secret='/wCczX7CiOBKMcsQjWTza7uGq0F/JD0SP1XFU0Bb')
shinyapps::setAccountInfo(name='romadanovskiy', token='18633EF826B1F34C0135E54CB2A51C4C', secret='/wCczX7CiOBKMcsQjWTza7uGq0F/JD0SP1XFU0Bb')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
install.packages(c('ggplot2', 'shiny'))
library(shinyapps)
deployApp()
wd
dir
ls
data(mtcars)
packages <- c("data.table", "ggplot2", "dplyr", "scales")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
pvals <- seq(0, 1, length = 1000)
plot(pvals, dbinom(3, 4, pvals) / dbinom(3, 4, 3/4), type = "l", frame = F,
lwd = 3, xlab = "p", ylab = "likelihood / max likelihood")
lambda <- seq(0, .2, length = 1000)
likelihood <- dpois(5, 94 * lambda) / dpois(5, 5)
plot(lambda, likelihood, frame = F, lwd = 3, type = "l", xlab = expression(lambda))
lines(rep(5/94, 2), 0 : 1, col = "red", lwd = 3)
lines(range(lambda[likelihood > 1 / 16]), rep(1 / 16, 2), lwd = 2)
lines(range(lambda[likelihood > 1 / 8]), rep(1 / 8, 2), lwd = 2)
packages <- c("data.table", "ggplot2", "dplyr", "scales")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit)
as.factor(cyl)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit)
cylF <- as.factor(cyl)
fit <- lm(mpg ~ cylF + wt, data=mtcars)
summary(fit)
x <- predict.lm(fit, data.frame(cyl = cylF, wt))
x[cylF==1]
x[cylF==1,]
cylF==1
cylF==4
x[cylF==4]
mean(x[cylF==4])-mean(x[cylF==8])
fit2 <- lm(mpg ~ as.factor(cyl), data=mtcars)
summary(fit2)$coef[3] # -11.56364
summary(fit)$coef[3] # -6.07086
summary(fit2)
summary(fit)
summary(fit)
fit3 <- lm(mpg ~ as.factor(cyl)*wt, data=mtcars)
summary(fit3)
result <- anova(fit, fit3, test="Chi")
result$Pr # 0.1037502
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
lm.influence(fit5)$hat[5] # 0.9945734
hatvalues(fit5)
dfbetas(fit5)[5, 2] # -133.8226
dfbetas(fit5) # -133.8226
library(MASS)
dim(shuttle)
head(shuttle)
shuttle$newUse <- as.numeric(shuttle$use == "auto")
fit <- glm(newUse ~ as.factor(wind) - 1, data=shuttle, family="binomial")
odds <- exp(summary(fit)$coef)
odds[1] / odds[2] # 0.9686888
fit <- glm(newUse ~ as.factor(wind) + factor(magn) - 1,
family="binomial", data=shuttle)
summary(fit)$coef
exp(coef(fit))
odds <- exp(cbind(OddsRatio = coef(fit), confint(fit)))
odds[1] / odds[2] # 0.9684981
data("InsectSprays")
fit <- glm(count ~ spray - 1, data=InsectSprays, family="poisson")
summary(fit)$coef
rate <- exp(coef(fit))
rate[1] / rate[2] # 0.9456522
fit <- glm(count ~ as.factor(spray) + offset(log(count+1)),
family="poisson", data=InsectSprays)
fit2 <- glm(count ~ as.factor(spray) + offset(log(10)+log(count+1)),
family="poisson", data=InsectSprays)
summary(fit)$coef
summary(fit2)$coef
# as.factor(spray)B  0.003512473
as.factor(spray) #B  0.003512473
as.factor(spray)
as.factor(spray)B
fit <- glm(count ~ as.factor(spray) + offset(log(count+1)),
family="poisson", data=InsectSprays)
fit2 <- glm(count ~ as.factor(spray) + offset(log(10)+log(count+1)),
family="poisson", data=InsectSprays)
summary(fit)$coef
summary(fit2)$coef
x <- -5 : 5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54,
3.87, 4.97)
knotPoint <- c(0)
spline <- sapply(knotPoint, function(knot) (x > knot) * (x - knot))
xMatrix <- cbind(1, x, spline)
fit <- lm(y ~ xMatrix - 1)
yhat <- predict(fit)
yhat
slope <- fit$coef[2] + fit$coef[3]
slope # 1.013
plot(x, y)
lines(x, yhat, col=2)
n <- 100
x1<-rnorm(n); x2<-rnorm(n);x3<-rnorm(n)
y <- 1 + x1 + x2 + x3 + rnorm(n, sd=.1)
ey <- resid(lm(y~x2+x3))
ex <- resid(lm(x1~x2+x3))
sum(ey*ex)/sum(ex^2)
coef(lm(y~x1+x2+x3))
coef(ex~ey-1)
coef(lm(ex~ey-1))
coef(lm(ey~ex-1))
library(datasets)
library(datasets); data("swiss");require(graphics)
pairs(swiss, panel = panel.smooth, main="Swish data", col=3+(swiss$Catholic>50))
summary(lm(Fertility~.,data=swiss))
data("InsectSprays")
summary(lm(count~spray, data=InsectSprays))$coefs
summary(lm(count~spray, data=InsectSprays))$coef
), data = InsectSprays)
I(1*(spray=="F")), data = InsectSprays))
summary(lm(count~
I(1*(spray=="B")) + I(1*(spray=="C")) +
I(1*(spray=="D")) + I(1*(spray=="E")) +
I(1*(spray=="F"))
, data = InsectSprays))$coef
summary(lm(count~spray-1, data=InsectSprays))$coef
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
coef(fit)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(.5 + runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2, -1, 1), runif(n/2, -1, 1));
beta0 <- 0; beta1 <- 2; tau <- 0; tau1 <- -4; sigma <- .2
y <- beta0 + x * beta1 + t * tau + t * x * tau1 + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t + I(x * t))
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
summary(fit)
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
fit <- lm(y ~ x + t)
fit2 <- lm(y ~ x)
summary(fit2)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
plot(resid(lm(x1 ~ x2)), resid(lm(y ~ x2)), frame = FALSE, col = "black", bg = "lightblue", pch = 21, cex = 2)
abline(lm(I(resid(lm(x1 ~ x2))) ~ I(resid(lm(y ~ x2)))), lwd = 2)
data("mtcars")
data("mtcars")
mtcars
head(mtcars)
fit <- lm(mpg~am-1)
data("mtcars")
fit <- lm(mpg~am-1)
fit <- lm(mpg~am-1)
fit <- lm(mtcars$mpg~mtcars$am-1)
summary(fit)
packages <- c("data.table", "ggplot2", "dplyr", "caret")
sapply(packages, library, character.only=TRUE, quietly=TRUE)
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
ggplot(mtcars, aes(mpg,am)) + geom_point()
ggplot(mtcars, aes(mpg,am)) + geom_histogram()
pairs(mtcars)
data("mtcars")
fit <- lm(mtcars$mpg~mtcars$am-1)
pairs(mtcars %>% select(mpg, wt, am, hp))
ggplot(mtcars, aes(x=mpg, fill=am)) + geom_histogram()
ggplot(mtcars, aes(mpg, fill=am)) + geom_histogram()
ggplot(mtcars, aes(mpg)) + geom_histogram()
ggplot(mtcars, aes(x=mpg, fill=am)) + geom_bar()
ggplot(mtcars, aes(x=mpg, fill=am)) + geom_bar(stat = "identity")
ggplot(mtcars, aes(x=mpg, fill=am)) + geom_density()
ggplot(mtcars, aes(x=mpg, fill=am)) + geom_density(kernel="gaussian")
gplot <- ggplot(mtcars, aes(x=mpg, fill=am)) +
geom_density(kernel="gaussian")
gplot
mpg
mtcars$mpg
gplot <- ggplot(mtcars, aes(x=mtcars$mpg, fill=mtcars$am)) +
geom_density(kernel="gaussian")
gplot
data(mtcars)
mtcars[1:3,]
data(mtcars)
mtcars[1:3,]
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
attach(mtcars)
result <- t.test(mpg~am)
result <- t.test(mpg~am)
pVal <- result$p.value
estVal <- result$estimate
## Classical example: Student's sleep data
plot(extra ~ group, data = sleep)
## Traditional interface
with(sleep, t.test(extra[group == 1], extra[group == 2]))
## Formula interface
t.test(extra ~ group, data = sleep)
## Classical example: Student's sleep data
plot(extra ~ group, data = sleep)
## Traditional interface
with(sleep, t.test(extra[group == 1], extra[group == 2]))
## Formula interface
t.test(extra ~ group, data = sleep, conf.level = .9)
## Classical example: Student's sleep data
plot(extra ~ group, data = sleep)
## Traditional interface
with(sleep, t.test(extra[group == 1], extra[group == 2]))
## Formula interface
t.test(extra ~ group, data = sleep, conf.level = .95)
## Classical example: Student's sleep data
plot(extra ~ group, data = sleep)
## Traditional interface
with(sleep, t.test(extra[group == 1], extra[group == 2]))
## Formula interface
t.test(extra ~ group, data = sleep, conf.level = .8)
result <- t.test(mpg~am)
pVal <- result$p.value
estVal <- result$estimate
result
result$estimate[[2]] - result$estimate[[1]]
result <- t.test(mpg~am-1)
pVal <- result$p.value
estVal <- result$estimate
```
result
fullModel <- lm(mpg~.,data=mtcars)
summary(fullModel)
fullModel <- lm(mpg~.-1,data=mtcars)
summary(fullModel)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel)
fullModel <- lm(mpg~.,data=mtcars)
summary(fullModel)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel)
fullModel <- lm(mpg~.-1,data=mtcars)
summary(fullModel)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel) # results hidden
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am -1, data=mtcars)
summary(amIntWtModel) # results hidden
mpgModel <- lm(mpg~wt+qsec+am-1, data=mtcars)
simpleMpgModel <- lm(mpg~am-1, data=mtcars)
summary(simpleMpgModel)
simpleMpgModel <- lm(mpg~am, data=mtcars)
summary(simpleMpgModel)
fullModel <- lm(mpg~.,data=mtcars)
summary(fullModel)
fullModel <- lm(mpg~.,data=mtcars)
summary(fullModel)
fullModel$residuals
fullModel$df.residual
fullModel$coefficients
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel)
mpgModel <- lm(mpg~wt+qsec+am, data=mtcars)
anova(mpgModel, simpleMpgModel, stepModel)
anova(mpgModel, simpleMpgModel)
confint(mpgModel)
sum((abs(dfbetas(mpgModel)))>1)
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
pairs(mtcars, panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
pairs(mtcars %>% select(mpg, wt, am, qsec), panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
ggplot(mtcars, aes(x=wt, y=mpg, group=am, color=am, height=3, width=3)) + geom_point() +
scale_colour_discrete(labels=c("Automatic", "Manual")) +
xlab("weight") + ggtitle("Scatter Plot of MPG vs. Weight by Transmission")
par(mfrow = c(2, 2))
plot(amIntWtModel)
par(mfrow = c(2, 2))
plot(mpgModel)
anova(mpgModel, simpleMpgModel)
confint(mpgModel)
mpgModel <- lm(mpg~wt+qsec+am, data=mtcars)
summary(
mpgModel
summary(mpgModel)
pairs(mtcars %>% select(mpg, wt, am, qsec), panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
packages <- c("data.table", "ggplot2", "dplyr", "caret")
sapply(packages, library, character.only=TRUE, quietly=TRUE)
sapply(packages, require, character.only=TRUE, quietly=TRUE)
packages <- c("data.table", "ggplot2", "dplyr", "caret")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
sapply(packages, library, character.only=TRUE, quietly=TRUE)
boxplot(mpg ~ am, data=mtcars, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
pairs(mtcars %>% select(mpg, wt, am, qsec), panel=panel.smooth, main="Pair Graph of Motor Trend Car Road Tests")
library(knitr)
getwd()
setwd("~/Documents/GitHub/Coursera/DataScience-JHU-RM/Project")
knit2pdf("MT-mpg.Rmd")
anova(mpgModel, simpleMpgModel, fullModel)
confint(mpgModel)
amIntWtModel<-lm(mpg ~ wt + qsec + am + wt:am, data=mtcars)
summary(amIntWtModel) # results hidden
setwd("~/Documents/GitHub/Coursera/DataScience-JHU-ML/Project")
packages <- c("data.table", "ggplot2", "dplyr", "scales", "caret", "randomForest", "corrplot")
sapply(packages, library, character.only=TRUE, quietly=TRUE)
trainRaw <- read.csv("./pml-training.csv")
testRaw <- read.csv("./pml-testing.csv")
dim(trainRaw)
dim(testRaw)
sum(complete.cases(trainRaw))
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
testRaw <- testRaw[, colSums(is.na(testRaw)) == 0]
classe <- trainRaw$classe
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
View(trainRaw)
trainRemove
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
set.seed(22519) # For reproducibile purpose
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
confusionMatrix(testData$classe, predictRf)
accuracy <- postResample(predictRf, testData$classe)
accuracy
oose <- 1 - as.numeric(confusionMatrix(testData$classe, predictRf)$overall[1])
oose
result <- predict(modelRf, testCleaned[, -length(names(testCleaned))])
result
corrPlot <- cor(trainData[, -length(names(trainData))])
corrplot(corrPlot, method="color")
install.packages("corrplot")
corrPlot <- cor(trainData[, -length(names(trainData))])
corrplot(corrPlot, method="color")
library(corrplot)
corrPlot <- cor(trainData[, -length(names(trainData))])
corrplot(corrPlot, method="color")
treeModel <- rpart(classe ~ ., data=trainData, method="class")
prp(treeModel) # fast plot
install.packages("prp")
install.packages("rpart")
install.packages("rpart.plot")
packages <- c("data.table", "ggplot2", "dplyr", "scales", "caret", "randomForest", "corrplot", "rpart", "rpart.plot")
sapply(packages, library, character.only=TRUE, quietly=TRUE)
treeModel <- rpart(classe ~ ., data=trainData, method="class")
prp(treeModel) # fast plot
pml_write_files(as.character(result))
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(as.character(result))
install.packages("Parallel")
install.packages("doParallel")
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
nearzero <- nearZeroVar(trainRaw, saveMetrics = TRUE)
train <- train[, !nearzero$nzv]
trainRaw <- read.csv("./pml-training.csv")
testRaw <- read.csv("./pml-testing.csv")
sum(complete.cases(trainRaw))
nearzero <- nearZeroVar(trainRaw, saveMetrics = TRUE)
train <- train[, !nearzero$nzv]
train <- trainRaw[, !nearzero$nzv]
rem <- sapply(colnames(train), function(x)
if (sum(is.na(train[, x])) > 0.30*nrow(train)) return(TRUE)
}else{ return(FALSE) }
rem <- sapply(colnames(train), function(x) if (sum(is.na(train[, x])) > 0.30*nrow(train)) return(TRUE)
rem <- sapply(colnames(train), function(x) if (sum(is.na(train[, x])) > 0.30*nrow(train)) {return(TRUE)
}else{ return(FALSE) }
)
rem <- sapply(colnames(train), function(x) if (sum(is.na(train[, x])) > 0.30*nrow(train)) {return(TRUE)
rem <- sapply(colnames(train), function(x) if (sum(is.na(train[, x])) > 0.30*nrow(train)) { return(TRUE) }else{ return(FALSE) }
)
rem <- sapply(colnames(train), function(x) if (sum(is.na(train[, x])) > 0.30*nrow(train)) { return(TRUE) }else{ return(FALSE) })
train <- train[, !rem]
train <- train[, -(1:6)]
dim(train)
classe <- train$classe
trainCleaned <- train[, sapply(train, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(test))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
classe <- train$classe
trainCleaned <- train[, sapply(train, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
set.seed(10001)
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=200)
corr <- findCorrelation(cor(train[, -53]), cutoff=0.8)
names(train)[corr]
dim(trainRaw)
dim(trainRaw)[[1]]
dim(trainRaw)[[2]]
setwd("~/Documents/GitHub/FinMarketsAnalysisR")
install.packages("PerformanceAnalytics")
install.packages("xts")
source("./performanceReportWithKnitr.R")
performanceReport(inputPath="./",
inputFile="mocRtnFile.csv",
keepColumns=c("date","optimAlloc..."))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Documents/GitHub/FinMarketsAnalysisR")
read.csv(paste("./","mocRtnFile.csv",sep=""),sep=",")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(PerformanceAnalytics)
shiny::runApp()
shiny::runApp()
