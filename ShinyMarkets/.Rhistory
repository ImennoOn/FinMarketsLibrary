shiny::runApp()
shiny::runApp()
shiny::runApp()
traceback()
options(error = browser)
shiny::runApp()
traceback()
shiny::runApp()
options(shiny.error=traceback)
options(shimy.error=traceback)
shiny::runApp()
library(PerformanceAnalytics)
library(shiny)
library(xts)
setwd("~/Documents/GitHub/FinMarketsAnalysisR/ShinyMarkets")
getData <- function(inputPath=inputPath,inputFile=inputFile,keepColumns=keepColumns){
data <- read.csv(paste(inputPath,inputFile,sep=""),sep=",")
keepColumns <- keepColumns
dataDaily <- data[,keepColumns]
colnames(dataDaily) <- c("date","rtn")
days <- as.Date(dataDaily[,"date"],"%m/%d/%Y")
dailyRtn <- as.numeric(substring(dataDaily[,"rtn"],1,nchar(as.character(dataDaily[,"rtn"]))-1)) ##
return(list(date=days,rtn=dailyRtn))
}
dt <- getData(inputPath="./",
inputFile="mocRtnFile.csv",
keepColumns=c("date","rtn"))
data <- data()
data <- dt()
data <- dt
posStart <- min(which(as.Date(data$date,format="%Y-%m-%d") >= as.Date(input$startDate,format="%Y-%m-%d")))
theDates <- seq(as.Date("2005-01-01"),Sys.Date(),by="months")
theDates <- seq(as.Date("2005-01-01"),Sys.Date(),by="months")
theDates <- seq(as.Date("2005-01-01"),as.Date("2010-01-01"),by="months")
theDates <- seq(as.Date("2012-01-01"),as.Date("2014-12-30"),by="months")
shiny::runApp()
###################################
# Launch Shiny App
#
# thertrader@gmail.com - June 2014
###################################
library(PerformanceAnalytics)
library(shiny)
library(xts)
runApp("~/Documents/GitHub/FinMarketsAnalysisR/ShinyMarkets")
input$startDate<-as.Date("20012-01-01")
as.Date("2012-01-01")
input$startDate<-as.Date("2012-01-01")
input<-df()
input<-df(x=1)
input<-data.frame(x=1)
input$startDate<-as.Date("2012-01-01")
input$endDate<-as.Date("2013-01-01")
posStart <- min(which(as.Date(data$date,format="%Y-%m-%d") >= as.Date(input$startDate,format="%Y-%m-%d")))
posEnd <- max(which(as.Date(data$date,format="%Y-%m-%d") <= as.Date(input$endDate,format="%Y-%m-%d")))
x <- data$date[posStart:posEnd]
y <- data$rtn[posStart:posEnd]
xDD <- as.vector(Drawdowns(y/100))
xDD <- as.vector(findDrawdowns(y/100))
xDD <- as.vector((y/100))
par(mfrow=c(2,1),cex=0.9,mex=0.4)
plot(x,cumsum(y),
type="l",
main=" Equity Curve (%)",
xlab="",
ylab="",
col="royal blue",
lwd=1.5)
grid(col="dark grey")
plot(x,100*xDD,
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
grid(col="dark grey")
}
shiny::runApp()
xDD <- as.vector(findDrawdowns(y/100)
xDD <- as.vector(findDrawdowns(y/100))
xDD <- as.vector(findDrawdowns(y/100))
xDD <- as.vector(findDrawdowns(y[,,drop=FALSE]/100))
xDD <- as.vector(findDrawdowns(y[,1]/100))
xDD <- as.vector(findDrawdowns(y[,]/100))
xDD <- as.vector(findDrawdowns(y[,]))
xDD <- as.vector(findDrawdowns(y))
xDD <- as.vector(findDrawdowns(y/100))
xDD <- as.vector(findDrawdowns(data.frame(x=x,y=y/100)))
xDD <- as.vector(table.Drawdowns(y/100))
y <- data$rtn[posStart:posEnd]
xDD <- as.vector(table.Drawdowns(y/100))
table.Drawdowns(y/100)
table.Drawdowns(y)
xDD <- table.Drawdowns(as.vector(y/100))
as.vector(y/100)
data(edhec)
table.Drawdowns(edhec[,1,drop=FALSE])
table.Drawdowns(edhec[,12,drop=FALSE])
data(managers)
managers[,8,drop=FALSE]
df <- data.frame(y=y)
rownames(df) <- x
df
drawdowns <- data.frame(y=y)
rownames(drawdowns) <- drawdowns
drawdowns <- data.frame(y=y)
rownames(drawdowns) <- x
drawdowns
drawdowns <- data.frame(y=y/100)
rownames(drawdowns) <- x
xDD <- as.vector(findDrawdowns(drawdowns))
shiny::runApp()
dailyDD <- as.vector(findDrawdowns(drawdowns))
maxDD <- 100*round(min(dailyDD),3)
dailyDD <- as.vector(findDrawdowns(drawdowns))[[1]]
maxDD <- 100*round(min(dailyDD),3)
recoveryTime <- round(min(which(dailyDD[match(min(dailyDD),dailyDD):length(dailyDD)] == 0)),0)
painIndex <- round(PainIndex(y),2)
timeInMarket <- 100*round(length(which(y != 0))/length(y),2)
riskTable <- rbind(paste(maxDD,"%",sep=""),paste(recoveryTime," days",sep=""),painIndex,paste(timeInMarket,"%",sep=""))
rownames(riskTable) <- c("Max.DD","Recovery Time","Pain Index","% Time Invested")
colnames(riskTable) <- c("Risk")
riskTable
data <- data()
posStart <- min(which(as.Date(data$date,format="%Y-%m-%d") >= as.Date(input$startDate,format="%Y-%m-%d")))
posEnd <- max(which(as.Date(data$date,format="%Y-%m-%d") <= as.Date(input$endDate,format="%Y-%m-%d")))
x <- data$date[posStart:posEnd]
y <- data$rtn[posStart:posEnd]
avRtn <- round(mean(y,na.rm=TRUE),2)
avRtnPos <- round(mean(y[y >0],na.rm=TRUE),2)
avRtnNeg <- round(mean(y[y <0],na.rm=TRUE),2)
hitRatio <- 100*round(length(which(y > 0))/length(which(y != 0)),2)
worstDay <- round(min(y),2)
bestDay <- round(max(y),2)
dailyTable <- rbind(paste(avRtn,"%",sep=""),paste(avRtnPos,"%",sep=""),paste(avRtnNeg,"%",sep=""),paste(hitRatio,"%",sep=""),paste(worstDay,"%",sep=""),paste(bestDay,"%",sep=""))
rownames(dailyTable) <- c("Av. Rtn","Av. Rtn > 0","Av. Rtn < 0","Hit Ratio","Worst Day","Best Day")
colnames(dailyTable) <- c("Daily")
shiny::runApp()
shiny::runApp()
traceback()
options(shiny.traceback=TRUE)
shiny::runApp()
traceback()
options(shiny.error=traceback)
runApp("~/Documents/GitHub/FinMarketsAnalysisR/ShinyMarkets", options(shiny.error=traceback))
###################################
# Launch Shiny App
#
# thertrader@gmail.com - June 2014
###################################
library(PerformanceAnalytics)
library(shiny)
library(xts)
runApp("~/Documents/GitHub/FinMarketsAnalysisR/ShinyMarkets", options(shiny.error=traceback))
shiny::runApp()
x <- data$date[posStart:posEnd]
y <- data$rtn[posStart:posEnd]
drawdowns <- data.frame(y=y/100)
rownames(drawdowns) <- x
xDD <- as.vector(findDrawdowns(drawdowns))[[1]]
xDD <- as.vector(findDrawdowns(drawdowns))
drawdowns
data <- getData(inputPath="./",
inputFile="mocRtnFile.csv",
keepColumns=c("date","rtn"))
x <- data$date[posStart:posEnd]
y <- data$rtn[posStart:posEnd]
drawdowns <- data.frame(y=y/100)
rownames(drawdowns) <- x
xDD <- as.vector(findDrawdowns(drawdowns))
par(mfrow=c(2,1),cex=0.9,mex=0.4)
plot(x,cumsum(y),
type="l",
main=" Equity Curve (%)",
xlab="",
ylab="",
col="royal blue",
lwd=1.5)
grid(col="dark grey")
plot(x,100*xDD,
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
grid(col="dark grey")
plot(x,100*xDD[[1]],
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
plot(x,100*as.numeric(xDD),
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
plot(x,100*as.double(xDD),
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
100*as.double(xDD)
100*xDD
100*xDD[1]
100*xDD[[1]]
plot(x,100*xDD[[1]],
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
100*xDD[[1]]x
x
View(drawdowns)
xDD <- as.vector(findDrawdowns(drawdowns))
xDD
plot(x,cumsum(y),
type="l",
main=" Equity Curve (%)",
xlab="",
ylab="",
col="royal blue",
lwd=1.5)
grid(col="dark grey")
plot(x,100*xDD[,1],
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
grid(col="dark grey")
plot(x,100*xDD[,1],
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
grid(col="dark grey")
v
xDD
plot(x,100*xDD$to,
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
x <- data$date[posStart:posEnd]
y <- data$rtn[posStart:posEnd]
drawdowns <- data.frame(y=y/100)
rownames(drawdowns) <- x
xDD <- as.vector(findDrawdowns(drawdowns))
par(mfrow=c(2,1),cex=0.9,mex=0.4)
plot(x,cumsum(y),
type="l",
main=" Equity Curve (%)",
xlab="",
ylab="",
col="royal blue",
lwd=1.5)
grid(col="dark grey")
plot(x,100*xDD$to,
type="l",
xlab="",
ylab="",
main="DrawDowns (%)",
col="royal blue",
lwd=1.5)
xDD <- as.vector(findDrawdowns(drawdowns,geometric = TRUE))
xDD
xDD <- as.vector(findDrawdowns(drawdowns,geometric = F))
xDD <- as.vector(findDrawdowns(drawdowns,geometric = F))
xDD
findDrawdowns(drawdowns,geometric = F)
xDD
as.vector(xDD)
as.vector(xDD, made="any")
as.vector(xDD, made="any")
as.vector(xDD, made="logical")
as.vector(xDD, maode="logical")
as.vector(xDD, mode="logical")
as.vector(xDD, mode="ANY")
as.vector(xDD, mode="any")
xDD <- as.vector(as.matrix(findDrawdowns(drawdowns,geometric = F)))
xDD
class(findDrawdowns(drawdowns,geometric = F))
xDD<-findDrawdowns(drawdowns)
xDD
class(xDD$recovery)
as.matrix(xDD)
as.vector(xDD)
as.vector(t(xDD))
indx <- length(drawdowns)
indx <- max(sapply(xDD, length))
drawdowns <- data.frame(y=y/100)
rownames(drawdowns) <- x
xDD <- findDrawdowns(drawdowns)
indx <- max(sapply(xDD, length))
xDD <- sapply(xDD, `length<-`, indx)
xDD <- as.vector(xDD)
drawdowns <- data.frame(y=y/100)
rownames(drawdowns) <- x
xDD <- findDrawdowns(drawdowns)
indx <- max(sapply(xDD, length))
View(data.table(xDD))
View(data.frame(xDD))
require(quantmod)
require(PerformanceAnalytics)
getSymbols("DJIA",src="FRED")
getSymbols("DJTA",src="FRED")
getSymbols("DJIA",src="FRED")
require(PerformanceAnalytics)
getSymbols("DJIA",src="FRED")
library(quantmod)
# display a simple bar chart
getSymbols(c("AMZN"))
barChart(AMZN,theme='white.mono',bar.type='hlc')
getSymbols(c("AMZN"), src="FRED")
getSymbols(c("AMZN"), src="FRED",method="curl")
require(PerformanceAnalytics)
getSymbols("DJIA")
getSymbols("DJTA")
getSymbols("DJIA")
getSymbols("DJTA")
getSymbols(c("DJIA", "DJTA", "DJUA"))
getSymbols(c("DJIA", "YAHO", "DJUA"))
getSymbols(c("DJIA", "YAHO"))
getSymbols(c("DJIA"))
getSymbols(c("DJIA","GOOG"))
getSymbols(c("DJIA","GOOG","AMZN"))
DJ <- merge(DJIA,GOOG,AMZN)
#DJ.yearly <- DJ[endpoints(DJ, on="years", k=1),]
DJ.roc <- ROC(DJ,n=1,type="discrete")
DJ.draw = Drawdowns(DJ.roc)
DJ.draw = findDrawdowns(DJ.roc)
DJ.roc <- ROC(DJ,n=1,type="discrete")
DJ.draw = findDrawdowns(DJ.roc)
DJ.draw = table.Drawdowns(DJ.roc)
#jpeg(filename="DJ plot with Drawdowns zoo.jpg",
#	quality=100,width=6.25, height = 6.25,  units="in",res=96)
plot.zoo(log(DJ),plot.type="single",
col=c(2,3,4),ylab="log Price",xlab=NA,main="Dow Jones Indexes")
rgb <- hcl(c(0, 0, 260), c = c(100, 0, 100), l = c(50, 90, 50), alpha = 0.3)
xblocks(index(DJ),as.vector(DJ.draw[,1] < -0.20),col = rgb[1])
xblocks(index(DJ),as.vector(DJ.draw[,1] < -0.40),col = rgb[1])
legend("topleft",inset=0.05,colnames(DJ),fill=c(2,3,4),bg="white")
#dev.off()
plot.zoo(log(DJ),plot.type="single",
col=c(2,3,4),ylab="log Price",xlab=NA,main="Dow Jones Indexes")
rgb <- hcl(c(0, 0, 260), c = c(100, 0, 100), l = c(50, 90, 50), alpha = 0.3)
xblocks(index(DJ),as.vector(DJ.draw[,1] < -0.20),col = rgb[1])
xblocks(index(DJ),as.vector(DJ.draw[,1] < -0.40),col = rgb[1])
abline(lm(log(coredata(DJ[,1]))~as.Date(index(DJ))),col=2)
abline(lm(log(coredata(DJ[,2]))~as.Date(index(DJ))),col=3)
abline(lm(log(coredata(DJ[,3]))~as.Date(index(DJ))),col=4)
drawdowns <- table.Drawdowns(DJ.roc[,1])
drawdowns.dates <- cbind(format(drawdowns$From),format(drawdowns$To))
drawdowns.dates[is.na(drawdowns.dates)] <- format(index(DJ.roc)[NROW(DJ.roc)])
drawdowns.dates <- lapply(seq_len(nrow(drawdowns.dates)), function(i) drawdowns.dates[i,])
#jpeg(filename="DJ plot with Drawdowns chart TimeSeries.jpg",
#	quality=100,width=6.25, height = 6.25,  units="in",res=96)
chart.TimeSeries(DJ,ylog=TRUE,
period.areas = drawdowns.dates,period.color = rgb[1],
colorset=c(2,3,4),
legend.loc="topleft",
main = "Dow Jones Indexes" )
chart.TimeSeries(DJ,ylog=TRUE,
period.areas = drawdowns.dates,period.color = rgb[1],
colorset=c(2,3,4),
legend.loc="topright",
main = "Dow Jones Indexes" )
chart.TimeSeries(DJ,ylog=TRUE,
period.areas = drawdowns.dates,period.color = rgb[1],
colorset=c(2,3,4),
legend.loc="bottonright",
main = "Dow Jones Indexes" )
chart.TimeSeries(DJ,ylog=TRUE,
period.areas = drawdowns.dates,period.color = rgb[1],
colorset=c(2,3,4),
legend.loc="right",
main = "Dow Jones Indexes" )
charts.PerformanceSummary(DJ.roc,ylog=TRUE,
period.areas = drawdowns.dates,period.color = rgb[1],
colorset=c(2,3,4),
legend.loc="topleft",
main = "Dow Jones Indexes" )
